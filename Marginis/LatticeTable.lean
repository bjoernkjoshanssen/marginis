import Mathlib.Logic.Basic
import Mathlib.Algebra.Group.Basic
import Mathlib.Analysis.Convex.Function
import Mathlib.Data.Real.Basic
import Mathlib.Logic.Basic
import Mathlib.Order.Defs
import Mathlib.Order.Sublattice
import Mathlib.Data.Real.Hyperreal
import Mathlib.Data.Matrix.Basic
import Mathlib.LinearAlgebra.Matrix.Determinant.Basic

/-!

# Lattice tables
as used in computability theory. -/

structure latticeTable (A : Type*) where
  (Œò : Set <| A ‚Üí A ‚Üí Prop)
  (h : (fun _ _ => True) ‚àà Œò ‚àß
       (fun x y => x=y) ‚àà Œò ‚àß
    (‚àÄ Œ± ‚àà Œò, ‚àÄ Œ≤ ‚àà Œò, (fun x y => Œ± x y ‚àß Œ≤ x y) ‚àà Œò) ‚àß
    (‚àÄ Œ± ‚àà Œò, ‚àÄ Œ≤ ‚àà Œò, Relation.Join (Relation.ReflTransGen  (fun x y => Œ± x y ‚à® Œ≤ x y)) ‚àà Œò) ‚àß -- need eq. closure
    ‚àÄ Œ± ‚àà Œò, IsEquiv _ Œ±)

lemma Relation_Transgen_refl {A : Type*} {R : A ‚Üí A ‚Üí Prop}
    (h : Reflexive R):
    Reflexive (Relation.TransGen R) := by
  intro x
  exact Relation.TransGen.single (h x)

lemma Relation_Transgen_symm {A : Type*} {R : A ‚Üí A ‚Üí Prop}
    (h : Symmetric R):
    Symmetric (Relation.TransGen R) := fun x y h‚ÇÅ => by
  induction h‚ÇÅ with
  | single h‚ÇÇ =>
    apply Relation.TransGen.single
    exact h h‚ÇÇ
  | tail _ f e =>
    exact Relation.TransGen.head (h (h (h f))) e



/-- Get lattice representations as IsSubLattice of this: -/
instance (A : Type*) : Lattice {Œ± : A ‚Üí A ‚Üí Prop // IsEquiv _ Œ±} := {
  le := fun Œ± Œ≤ => ‚àÄ x y : A, Œ≤.1 x y ‚Üí Œ±.1 x y
  lt := fun Œ± Œ≤ =>
      (‚àÄ x y : A, Œ≤.1 x y ‚Üí Œ±.1 x y) ‚àß
    ¬¨ (‚àÄ x y : A, Œ±.1 x y ‚Üí Œ≤.1 x y)
  sup := fun Œ± Œ≤ => ‚ü®fun x y => Œ±.1 x y ‚àß Œ≤.1 x y, {
        refl := fun _ => ‚ü®Œ±.2.refl _, Œ≤.2.refl _‚ü©
        trans := by
            have := Œ±.2.trans
            have := Œ≤.2.trans
            tauto
        symm := fun _ _ h => ‚ü®Œ±.2.symm _ _ h.1, Œ≤.2.symm _ _ h.2‚ü©
    }‚ü©
  le_refl := by simp
  le_trans := by simp_all
  le_antisymm  := fun Œ± Œ≤ h‚ÇÄ h‚ÇÅ => by aesop
  le_sup_left  := fun _ _ _ _ h => h.1
  le_sup_right := fun _ _ _ _ h => h.2
  sup_le       := fun _ _ _ _ _ => by aesop
  inf := fun Œ± Œ≤ => ‚ü®Relation.TransGen fun x y => Œ±.1 x y ‚à® Œ≤.1 x y,
    {
        refl := fun a => by
            have := Œ±.2.refl
            have := @Relation_Transgen_refl A (fun x y ‚Ü¶ Œ±.1 x y ‚à® Œ≤.1 x y)
                (fun x => Or.inl <| Œ±.2.refl x)
            apply this
        trans := fun _ _ _ => Relation.TransGen.trans
        symm := by
            apply Relation_Transgen_symm
            have := Œ±.2.symm
            have := Œ≤.2.symm
            tauto
    }‚ü©
  inf_le_left  := fun _ _ _ _ h => Relation.TransGen.single <| Or.inl h
  inf_le_right := fun _ _ _ _ h => Relation.TransGen.single <| Or.inr h
  le_inf := fun Œ± _ _ _ _ _ _ h => by
    have := Œ±.2.trans
    induction h <;> tauto
}

def ùì¢ (f : ‚Ñï ‚Üí ‚Ñï) := Œ£ n, Œ† i : Fin n, Fin <| f i.1

def œÉ : ùì¢ (fun k => k.succ) := ‚ü®2, fun i => i‚ü©



instance : Sublattice ({Œ± : Fin 2 ‚Üí Fin 2 ‚Üí Prop // IsEquiv _ Œ±}) := {
    carrier := by
        exact Set.univ
    infClosed' := by exact fun ‚¶Éa‚¶Ñ a ‚¶Éb‚¶Ñ _ ‚Ü¶ a
    supClosed' := by exact fun ‚¶Éa‚¶Ñ a ‚¶Éb‚¶Ñ _ ‚Ü¶ a

}

-- instance (A : Type*) (T : latticeTable A) : Lattice T.Œò := {
--   le := fun Œ± Œ≤ => ‚àÄ x y : A, Œ≤.1 x y ‚Üí Œ±.1 x y
--   sup := fun Œ± Œ≤ => ‚ü®fun x y => Œ±.1 x y ‚àß Œ≤.1 x y, T.h.2.2.1 _ Œ±.2 _ Œ≤.2‚ü©
--   le_refl := fun Œ± x y => id
--   le_trans := fun Œ± Œ≤ Œ≥ h‚ÇÄ h‚ÇÅ => by
--     unfold LE.le at *
--     simp_all
--   le_antisymm := fun Œ± Œ≤ => sorry
--   le_sup_left := sorry
--   le_sup_right := sorry
--   sup_le := sorry
--   inf := sorry
--   inf_le_left := sorry
--   inf_le_right := sorry
--   le_inf := sorry
--   lt_iff_le_not_le := sorry
-- }

/-- The 0-1 lattice is a lattice table. -/
def smallLatTab {A : Type*} : latticeTable A := by
  exact {
    Œò := fun Œ± => Œ± = (fun _ _ => True) ‚à® Œ± = (fun x y => x=y)
    h := by
      constructor
      ¬∑ left
        rfl
      ¬∑ constructor
        ¬∑ right
          rfl
        ¬∑ constructor
          ¬∑ intro Œ± hŒ± Œ≤ hŒ≤
            cases hŒ± with
            | inl h =>
              cases hŒ≤ with
              | inl g => subst h;subst g;left;simp
              | inr g => subst h;subst g;right;simp
            | inr h =>
              rcases hŒ≤ with (g | g) <;> (subst h;subst g;right;simp)
          ¬∑ constructor
            ¬∑ intro Œ± hŒ± Œ≤ hŒ≤
              cases hŒ± with
              | inl h =>
                cases hŒ≤ with
                | inl g =>
                  subst h;subst g;left;simp
                  ext x y
                  simp
                  use x
                  constructor
                  ¬∑ exact Relation.ReflTransGen.refl
                  ¬∑ exact Relation.ReflTransGen.single trivial
                | inr g =>
                  subst h;subst g
                  left;simp
                  ext x y
                  simp
                  use x
                  constructor
                  ¬∑ exact Relation.ReflTransGen.refl
                  ¬∑ exact Relation.ReflTransGen.single trivial
              | inr h =>
                cases hŒ≤ with
                | inl g =>
                  subst h;subst g
                  left;simp
                  ext x y
                  simp
                  use x
                  constructor
                  ¬∑ exact Relation.ReflTransGen.refl
                  ¬∑ exact Relation.ReflTransGen.single trivial
                | inr g =>
                  subst h;subst g
                  right;simp
                  ext x y
                  constructor
                  ¬∑ have : Relation.ReflTransGen (fun x y : A ‚Ü¶ x = y) =
                      (fun x y ‚Ü¶ x = y) := by
                        refine Relation.reflTransGen_eq_self (congrFun rfl) ?trans
                        exact transitive_of_trans fun x y ‚Ü¶ x = y
                    rw [this]
                    intro h
                    obtain ‚ü®z,hz‚ü© := h
                    simp at hz
                    aesop
                  ¬∑ intro h
                    subst h
                    use x
            ¬∑ intro Œ± hŒ±
              cases hŒ± with
              | inl h =>
                subst h
                exact {
                  symm := by intros;trivial
                  refl := by intros;trivial
                  trans := by intros;trivial
                }
              | inr h =>
                subst h
                exact eq_isEquiv A
  }


/-- The partition lattice is a lattice table. -/
def Partition {A : Type*} : latticeTable A := by
  exact {
    Œò := fun Œ± => IsEquiv _ Œ±
    h := by
      constructor
      ¬∑ exact {
          symm := fun _ _ => id
          refl := fun _ => trivial
          trans := fun _ _ _ _ => id
        }
      ¬∑ constructor
        ¬∑ exact {
            symm := fun _ _    => Eq.symm
            refl :=               Eq.refl
            trans := fun _ _ _ => Eq.trans
          }
        ¬∑ constructor
          ¬∑ exact fun Œ± hŒ± Œ≤ hŒ≤ => {
            symm := fun a b h => ‚ü®hŒ±.symm a b h.1,
                                  hŒ≤.symm a b h.2‚ü©
            refl := fun _ => ‚ü®hŒ±.refl _, hŒ≤.refl _‚ü©
            trans := fun a b c hab hbc => ‚ü®hŒ±.trans _ _ _ hab.1 hbc.1,
                                           hŒ≤.trans _ _ _ hab.2 hbc.2‚ü©
            }
          ¬∑ constructor
            ¬∑ intro Œ± hŒ± Œ≤ hŒ≤
              have hs : Symmetric fun x y ‚Ü¶ Œ± x y ‚à® Œ≤ x y := by
                intro u v huv
                cases huv with
                | inl h =>
                  left
                  exact hŒ±.symm u v h
                | inr h =>
                  right
                  exact hŒ≤.symm u v h
              exact {
                symm := fun _ _ ‚ü®c,hc‚ü© => ‚ü®c, hc.symm‚ü©
                refl := fun a => by use a
                trans := fun a b c ‚ü®c‚ÇÄ,hc‚ÇÄ‚ü© ‚ü®c‚ÇÅ,hc‚ÇÅ‚ü© =>
                  ‚ü®c‚ÇÄ, ‚ü®hc‚ÇÄ.1, hc‚ÇÅ.2.trans <| (hc‚ÇÅ.1.symmetric hs).trans hc‚ÇÄ.2‚ü©‚ü©
              }
            ¬∑ exact fun _ => id
  }

def End {A : Type*} (L : latticeTable A) (f : A ‚Üí A) : Prop :=
  ‚àÄ Œ± ‚àà L.Œò, ‚àÄ x y, Œ± x y ‚Üí Œ± (f x) (f y)



/-- Every function is an endomorphism of the {0,1} lattice. -/
example {A : Type*} (f : A ‚Üí A) : End smallLatTab f := by
  intro Œ± hŒ± x y h‚ÇÄ
  cases hŒ± with
  | inl h =>
    subst h;trivial
  | inr h =>
    subst h
    rw [h‚ÇÄ]

def principal {A : Type*} (a b : A) : A ‚Üí A ‚Üí Prop :=
    fun x y => x = y ‚à® (x = a ‚àß y = b) ‚à® (x = b ‚àß y = a)

def principal_preserving {A : Type*} (f : A ‚Üí A) : Prop :=
  ‚àÄ a b, ‚àÄ x y, principal a b x y ‚Üí principal a b (f x) (f y)

/-- We now prove every endomorphism of Part n is identity or constant, unless n ‚â§ 2. -/
lemma principal_is_equiv {A : Type*} (a b : A) : IsEquiv A (principal a b) :=
  {
      symm  := by unfold principal;tauto
      refl  := by tauto
      trans := by
        unfold principal;
        intro u v w h‚ÇÄ h‚ÇÅ
        cases h‚ÇÄ with
        | inl h => subst h;tauto
        | inr h =>
          rcases h with h | h <;> (
            have := h.1
            subst this
            have := h.2
            subst this
            tauto)
  }

lemma principal_preserving_id {A : Type*} : @principal_preserving A id :=
  fun _ _ _ _ => id

lemma End_Partition_id {A : Type*} : @End A Partition id := by
  intro a _ x y
  simp

lemma End_Partition_const {A : Type*} (c : A) : @End A Partition (fun _ => c) := by
  intro Œ± hŒ± x y _
  simp
  apply hŒ±.refl

lemma const_iff {A : Type*} (f : A ‚Üí A) :
    (‚àÄ c, ‚àÉ x, f x ‚â† c) ‚Üî (‚àÄ c, f ‚â† fun _ => c) := by
  constructor
  ¬∑ intro h c hc
    subst hc
    specialize h c
    simp at h
  ¬∑ intro h c
    specialize h c
    contrapose h
    push_neg at h ‚ä¢
    ext x
    aesop


lemma not_id_or_const {A : Type*} {f : A ‚Üí A} (hf‚ÇÄ : f ‚â† id) (hf‚ÇÅ : ‚àÄ c, f ‚â† fun _ => c) :
  ‚àÉ a b, a ‚â† f a ‚àß f a ‚â† f b := by
    rw [‚Üê const_iff] at hf‚ÇÅ
    obtain ‚ü®a,ha‚ü© : ‚àÉ a, f a ‚â† a := by
      contrapose hf‚ÇÄ
      push_neg at hf‚ÇÄ ‚ä¢
      ext a
      rw [hf‚ÇÄ a]
      rfl
    use a
    have := hf‚ÇÅ (f a)
    obtain ‚ü®b,hb‚ü© := this
    use b
    tauto

lemma end_aux‚ÇÄ {A : Type*} {f : A ‚Üí A} {a b : A} (h : a ‚â† f a ‚àß f a ‚â† f b)
    (hf : End Partition f) : f a = b ‚àß f b = a := by
  specialize hf (principal a b) (principal_is_equiv _ _) a b (by tauto)
  unfold principal at hf
  tauto

lemma end_aux‚ÇÄp {A : Type*} {f : A ‚Üí A} {a b : A}  (h : a ‚â† f a ‚àß f a ‚â† f b)
    (hf : principal_preserving f) : f a = b ‚àß f b = a := by
  specialize hf a b a b (by
    unfold principal
    right;left;tauto
  )
  unfold principal at hf
  tauto

lemma end_aux‚ÇÅ {A : Type*} {f : A ‚Üí A} {a b c : A} (h : a ‚â† f a ‚àß f a ‚â† f b)
    (hf : End Partition f) (h‚ÇÇ : a ‚â† c) : f c = a := by
  have := end_aux‚ÇÄ h hf
  specialize hf (principal b c) (principal_is_equiv _ _) b c (by tauto)
  unfold principal at hf
  aesop

lemma end_aux‚ÇÅp {A : Type*} {f : A ‚Üí A} {a b c : A}  (h : a ‚â† f a ‚àß f a ‚â† f b)
    (hf : principal_preserving f) (h‚ÇÇ : a ‚â† c) : f c = a := by
  have := end_aux‚ÇÄp h hf
  specialize hf b c b c (by
    unfold principal
    right;left;tauto
  )
  unfold principal at hf
  cases hf with
  | inl h => rw [h] at this;tauto
  | inr h =>
  cases h with
  | inl h‚ÇÄ => exfalso;have h‚ÇÇ := h.2;apply h‚ÇÇ;apply this.1.trans;tauto
  | inr h‚ÇÄ => aesop


lemma not_endo {A : Type*} {f : A ‚Üí A} {a b c : A} (h : a ‚â† f a ‚àß f a ‚â† f b)
    (h‚ÇÇ : a ‚â† c) (h‚ÇÑ : b ‚â† c) : ¬¨ End Partition f := by
  intro hf
  have := end_aux‚ÇÄ h hf
  have h‚ÇÉ : f c = a := by apply end_aux‚ÇÅ <;> tauto
  specialize hf (principal a c) (principal_is_equiv _ _) a c (by tauto)
  unfold principal at hf
  aesop

lemma not_pp {A : Type*} {f : A ‚Üí A} {a b c : A} (h : a ‚â† f a ‚àß f a ‚â† f b)
    (h‚ÇÇ : a ‚â† c) (h‚ÇÑ : b ‚â† c) : ¬¨ principal_preserving f := by
  intro hf
  have := end_aux‚ÇÄp h hf
  have h‚ÇÉ : f c = a := by apply end_aux‚ÇÅp <;> tauto
  specialize hf a c a c
  unfold principal at hf
  aesop

open Classical
theorem getThree_fin {A : Type*} [Fintype A] (hn : Fintype.card A ‚â• 3) (a b : A) :
    ‚àÉ c, a ‚â† c ‚àß b ‚â† c := by
  by_contra H
  have : ¬¨ Fintype.card A ‚â§ 2 := by omega
  apply this
  have : Finset.univ ‚äÜ {a,b} := by
    intro c _
    push_neg at H
    specialize H c
    simp
    tauto
  have : Finset.card {a,b} ‚â§ 2 := Finset.card_le_two
  aesop

lemma getThree_inf {A : Type*} [Infinite A] : ‚àÉ g‚ÇÄ g‚ÇÅ g‚ÇÇ : A, g‚ÇÄ ‚â† g‚ÇÅ ‚àß g‚ÇÅ ‚â† g‚ÇÇ ‚àß g‚ÇÄ ‚â† g‚ÇÇ := by
  let g := Infinite.natEmbedding A
  have hg : Function.Injective g := Function.Embedding.injective g
  have : g 0 ‚â† g 1 := by
    intro hc
    specialize hg hc
    simp at hg
  have : g 1 ‚â† g 2 := by
    intro hc
    specialize hg hc
    simp at hg
  have : g 0 ‚â† g 2 := by
    intro hc
    specialize hg hc
    simp at hg
  use g 0
  use g 1
  use g 2

theorem clone_of_pp_of_ge_three {A : Type*} [Fintype A] (hn : Fintype.card A ‚â• 3)
    (f : A ‚Üí A) (hf : principal_preserving f) :
    f = id ‚à® ‚àÉ c, f = fun _ => c := by
  contrapose hf
  push_neg at hf
  obtain ‚ü®a,b,hab‚ü© := not_id_or_const hf.1 hf.2
  obtain ‚ü®c,hc‚ü© := getThree_fin (by aesop) a b
  exact not_pp hab hc.1 hc.2

theorem clone_of_pp_of_inf {A : Type*} [Infinite A] {f : A ‚Üí A} (hf : principal_preserving f) :
    f = id ‚à® ‚àÉ c,f = fun _ => c := by
  contrapose hf
  push_neg at hf
  obtain ‚ü®a,b,hab‚ü© := not_id_or_const hf.1 hf.2
  obtain ‚ü®g‚ÇÄ,g‚ÇÅ,g‚ÇÇ,hg‚ü© := @getThree_inf A _
  have := @not_pp A f a b
  obtain ‚ü®a,b,hab‚ü© := not_id_or_const hf.1 hf.2
  obtain ‚ü®c,hc‚ü© : ‚àÉ c, a ‚â† c ‚àß b ‚â† c := by
    by_cases h‚ÇÄ : a = g‚ÇÄ
    ¬∑ by_cases h‚ÇÅ : b = g‚ÇÅ
      ¬∑ use g‚ÇÇ
        aesop
      ¬∑ use g‚ÇÅ
        aesop
    ¬∑ by_cases h‚ÇÅ : b = g‚ÇÅ
      ¬∑ use g‚ÇÄ
        aesop
      ¬∑ by_cases h‚ÇÇ : b = g‚ÇÄ
        ¬∑ by_cases h‚ÇÉ : a = g‚ÇÅ
          ¬∑ subst h‚ÇÇ h‚ÇÉ;use g‚ÇÇ;tauto
          ¬∑ use g‚ÇÅ
        ¬∑ use g‚ÇÄ

  have := @not_pp A f a b c hab hc.1 hc.2

  apply this

/-- Endomorphisms of the Partition lattice. -/
theorem pp_of_EndPart {A : Type*} (f : A ‚Üí A) (hf : End Partition f) : principal_preserving f := by
  unfold End Partition at hf
  unfold principal_preserving
  intro a b
  exact hf (principal a b) (principal_is_equiv _ _)

/-- This is not used, but seems useful. -/
lemma get_two {A : Type*} [Fintype A] (h : Fintype.card A ‚â• 2) :
  ‚àÉ a b : A, a ‚â† b := by
    contrapose h
    push_neg at h ‚ä¢
    refine Nat.lt_add_one_of_le ?_
    refine Fintype.card_le_one_iff.mpr ?_
    exact h


lemma getCases {A : Type*} [Fintype A] {u‚ÇÄ u‚ÇÅ : A} (hu : Finset.univ = {u‚ÇÄ, u‚ÇÅ}) (a : A) :
    a = u‚ÇÄ ‚à® a = u‚ÇÅ := by
        have ha : a ‚àà (Finset.univ) := Finset.mem_univ a
        rw [hu, Finset.mem_insert, Finset.mem_singleton] at ha
        exact ha

/-- This long easy proof shows that for n=2 we do have an endomorphism
of Part that's not in the clone. -/
theorem ne_two_of_EndPart_implies_clone {A : Type*} [Fintype A] : (‚àÄ f : A ‚Üí A, End Partition f ‚Üí
  f = id ‚à® ‚àÉ c, f = fun _ => c) ‚Üí Fintype.card A ‚â† 2 := by
  intro h
  contrapose h
  push_neg at h ‚ä¢
  obtain ‚ü®a,b,hu‚ü© := Finset.card_eq_two.mp <| (@Finset.card_univ A _) ‚ñ∏ h

  use (fun x => ite (x=a) b (ite (x=b) a x))
  constructor
  ¬∑ intro Œ± hŒ± x y hxy
    have hy := getCases hu.2 y
    cases getCases hu.2 a with
    | inl h =>
      cases getCases hu.2 b with
      | inl h =>
        subst h
        tauto
      | inr h =>
        cases getCases hu.2 x with
        | inl h =>
          subst h
          simp
          cases hy with
          | inl h =>
            subst h
            simp
            apply hŒ±.refl
          | inr h =>
            subst h
            simp
            rw [if_neg (by tauto)]
            apply hŒ±.symm
            exact hxy
        | inr h =>
          subst h
          simp
          cases hy with
          | inl h =>
            subst h
            simp_all
            apply hŒ±.symm
            exact hxy
          | inr h =>
            subst h
            simp_all
            apply hŒ±.refl
    | inr h =>
      subst h
      simp
      tauto
  ¬∑ constructor
    ¬∑ intro hc
      apply congrFun at hc
      have ha := hc a
      simp at ha
      tauto
    ¬∑ intro c
      suffices ‚àÉ d,
        (fun x ‚Ü¶ if x = a then b else if x = b then a else x) d ‚â† (fun _ ‚Ü¶ c) d by
        contrapose this
        push_neg at this ‚ä¢
        intro d
        apply congrFun at this
        rw [this]
      use c
      have h‚ÇÄ : (Finset.univ : Finset A).card = 2 := by aesop
      have h‚ÇÅ := Finset.card_eq_two.mp h‚ÇÄ
      obtain ‚ü®u‚ÇÄ,u‚ÇÅ,hu‚ü© := h‚ÇÅ

      have : c = a ‚à® c = b := by
        rcases getCases hu.2 a with (h | h) <;> (
          rcases getCases hu.2 c with (h‚ÇÄ | h‚ÇÄ) <;> (
            subst h h‚ÇÄ
            have := getCases hu.2 b
            tauto
          ))
      rcases this with (h | h) <;> (subst h;simp;tauto)

theorem clone_of_pp_of_ne_two {A : Type*} [Fintype A] : Fintype.card A ‚â† 2 ‚Üí ‚àÄ f : A ‚Üí A, principal_preserving f ‚Üí
  f = id ‚à® ‚àÉ c, f = fun _ => c := by
  intro h
  by_cases hn : Fintype.card A ‚â• 3
  ¬∑ exact fun f a ‚Ü¶ clone_of_pp_of_ge_three hn f a
  ¬∑ intro f _
    left
    have : Fintype.card A = 0 ‚à® Fintype.card A = 1 := by omega
    cases this with
    | inl h =>
      ext x
      exfalso;revert h
      have : Nonempty A := by
        use x
      refine Fintype.card_ne_zero
    | inr h =>
      obtain ‚ü®u,hu‚ü© := Fintype.card_eq_one_iff.mp h
      ext x
      aesop

lemma ne_two_iff_pp_implies_clone_of_fin {A : Type*} [Fintype A] : Fintype.card A ‚â† 2 ‚Üî ‚àÄ f : A ‚Üí A, principal_preserving f ‚Üí f = id ‚à® ‚àÉ c, f = fun _ => c := by
  constructor
  ¬∑ apply clone_of_pp_of_ne_two
  ¬∑ exact fun h => ne_two_of_EndPart_implies_clone fun f hf => h f (pp_of_EndPart f hf)

lemma ne_two_iff_EndPart_implies_clone_of_fin {A : Type*} [Fintype A] : Fintype.card A ‚â† 2 ‚Üî
  ‚àÄ f : A ‚Üí A, End Partition f ‚Üí f = id ‚à® ‚àÉ c, f = fun _ => c := by
  constructor
  ¬∑ exact fun h f hf => (ne_two_iff_pp_implies_clone_of_fin).mp h f <| pp_of_EndPart f hf
  ¬∑ apply ne_two_of_EndPart_implies_clone


theorem EndPart_of_clone {A : Type*} (f : A ‚Üí A) :
    (f = id ‚à® ‚àÉ c, f = fun _ ‚Ü¶ c) ‚Üí End Partition f := by
  ¬∑ intro h
    cases h with
    | inl h => exact fun _ _ _ _ => h ‚ñ∏ id
    | inr h =>
      obtain ‚ü®c,hc‚ü© := h
      intro _ hŒ± _ _ _
      subst hc
      apply hŒ±.refl

theorem pp_eq_clone_of_ne_two {A : Type*} [Fintype A] (hn : Fintype.card A ‚â† 2) :
    principal_preserving = fun f : A ‚Üí A => f = id ‚à® ‚àÉ c, f = fun _ => c := by
  ext f
  constructor
  ¬∑ exact ne_two_iff_pp_implies_clone_of_fin.mp (by aesop) f
  ¬∑ exact fun h => pp_of_EndPart f <| EndPart_of_clone f h

theorem EndPart_eq_clone_of_ne_two {A : Type*} [Fintype A] (hn : Fintype.card A ‚â† 2) :
  End Partition = fun f : A ‚Üí A => f = id ‚à® ‚àÉ c, f = fun _ => c := by
  ext f
  constructor
  ¬∑ exact ne_two_iff_EndPart_implies_clone_of_fin.mp (by aesop) f
  ¬∑ exact EndPart_of_clone _

theorem eq_of_neg_two {A : Type*} [Fintype A]
    {Œ± : A ‚Üí A ‚Üí Prop} (hŒ± : IsEquiv A Œ±) {a b : A}
    (hab : a ‚â† b ‚àß Finset.univ = {a, b}) (H : ¬¨ Œ± a b) : Œ± = Eq := by
  ext x y
  have := hŒ±.refl a
  have := hŒ±.refl b
  have := hŒ±.symm a b
  have := hŒ±.symm b a
  cases getCases hab.2 x with
  | inl h =>
    subst h
    cases getCases hab.2 y with
    | inl h =>
      subst h
      simp
      apply hŒ±.refl
    | inr h =>
      subst h
      tauto
  | inr h =>
    subst h
    cases getCases hab.2 y with
    | inl h =>
      subst h
      simp_all
      tauto
    | inr h =>
      subst h
      tauto

theorem all_of_pos_two {A : Type*} [Fintype A]
    {Œ± : A ‚Üí A ‚Üí Prop} (hŒ± : IsEquiv A Œ±) {a b : A}
    (hab : a ‚â† b ‚àß Finset.univ = {a, b}) (H : Œ± a b) (u v : A) : Œ± u v := by
  cases getCases hab.2 u with
  | inl h =>
    subst h
    cases getCases hab.2 v with
    | inl h =>
      subst h
      apply hŒ±.refl
    | inr h => subst h;exact H
  | inr h =>
    subst h
    cases getCases hab.2 v with
    | inl h =>
      subst h
      apply hŒ±.symm _ _ H
    | inr h =>
      subst h
      apply hŒ±.refl

/-- For the special case `n=2` we check directly that EndPart_eq_pp. -/
theorem EndPart_eq_pp_of_two {A : Type*} [inst : Fintype A] (hn : Fintype.card A = 2) :
    End Partition = @principal_preserving A := by
  ¬∑ ext f
    constructor
    ¬∑ exact fun h a b => h (principal a b) (principal_is_equiv a b)
    ¬∑ intro _ Œ± hŒ± x y hxy
      obtain ‚ü®a,b,hab‚ü© := Finset.card_eq_two.mp <| (@Finset.card_univ A _) ‚ñ∏ hn
      by_cases H : Œ± a b
      ¬∑ apply all_of_pos_two <;> tauto
      ¬∑ have : Œ± = fun x y => x = y := by apply eq_of_neg_two <;> tauto
        subst this hxy
        simp
/-- On a finite set, a function preserves all equivalence relations iff it preserves all principal ones. -/
lemma EndPart_eq_pp_of_fin {A : Type*} [Fintype A] : End Partition = @principal_preserving A := by
  by_cases hn : Fintype.card A = 2
  ¬∑ exact EndPart_eq_pp_of_two hn
  ¬∑ exact (EndPart_eq_clone_of_ne_two hn).trans (pp_eq_clone_of_ne_two hn).symm

theorem pp_eq_clone_of_inf {A : Type*} (hn : Infinite A) :
    principal_preserving = fun f : A ‚Üí A => f = id ‚à® ‚àÉ c, f = fun _ => c := by
  ext f
  constructor
  ¬∑ exact clone_of_pp_of_inf
  ¬∑ intro h
    cases h with
    | inl h =>
      subst h
      intro a b x y h‚ÇÄ
      simp_all
    | inr h =>
      obtain ‚ü®c,hc‚ü© := h
      intro a b x y _
      have hc : ‚àÄ x, f x = c := by aesop
      rw [hc x, hc y]
      unfold principal
      tauto

/-- The main result: being an endomorphism of the partition lattice is equivalent
to being principal-congruence preserving, on any set. -/
theorem EndPart_eq_pp {A : Type*} : End Partition = @principal_preserving A := by
  by_cases H : ‚àÉ _ : Fintype A, True
  ¬∑ obtain ‚ü®_, _‚ü© := H
    exact EndPart_eq_pp_of_fin
  ¬∑ have hI : Infinite A := by
      by_contra H‚ÇÄ
      have := fintypeOfNotInfinite H‚ÇÄ
      push_neg at H
      simp at H
      apply H
      exact this
    obtain ‚ü®g‚ÇÄ,g‚ÇÅ,_,_‚ü© := @getThree_inf A _
    ext f
    constructor
    ¬∑ intro he
      cases clone_of_pp_of_inf (pp_of_EndPart f he) with
      | inl h => subst h; apply principal_preserving_id
      | inr h =>
        obtain ‚ü®c,hc‚ü© := h
        subst hc
        intro _ _ _ _ _
        exact Or.symm (Or.inr rfl)
    ¬∑ intro h
      have : f = id ‚à® ‚àÉ c, f = fun _ => c := by
        have := pp_eq_clone_of_inf hI
        rw [this] at h
        tauto
      cases this with
      | inl h =>
        subst h
        apply End_Partition_id
      | inr h =>
        obtain ‚ü®c,hc‚ü© := h
        have : f = fun _ => c := by ext x;simp_all
        subst this
        apply End_Partition_const


def smul' {k : ‚Ñï} (c : ‚Ñù) (a : Fin k ‚Üí ‚Ñù) : Fin k ‚Üí ‚Ñù := fun i => c * a i

theorem linear_logic_equation (a : Fin 2 ‚Üí ‚Ñù) (b : Fin 3 ‚Üí ‚Ñù) (v : Fin 5 ‚Üí ‚Ñù) :
    (‚àÄ c d : ‚Ñù, Matrix.dotProduct (smul' c a) ![v 0, v 1]
                  + Matrix.dotProduct (smul' d b) ![v 2, v 3, v 4] = 0) ‚Üî
    ‚àÉ p q, Matrix.dotProduct p a = 0
         ‚àß Matrix.dotProduct q b = 0 ‚àß v = ![p 0, p 1, q 0, q 1, q 2] := by
  constructor
  ¬∑ intro h
    use ![v 0, v 1], ![v 2, v 3, v 4]
    simp_all [smul', Matrix.dotProduct, Finset.sum]
    constructor
    ¬∑ rw [‚Üê h 1 0]
      ring
    ¬∑ constructor
      rw [‚Üê h 0 1]
      ring
      ¬∑ ext x
        fin_cases x <;> rfl
  ¬∑ intro ‚ü®p,q,h‚ü© c d
    have := h.2.2
    subst this
    unfold smul' Matrix.dotProduct Finset.sum at *
    simp_all
    ring_nf
    have : c * a 0 * p 0 + c * a 1 * p 1 + d * b 0 * q 0 + d * b 1 * q 1 + d * b 2 * q 2
         = c * (a 0 * p 0 + a 1 * p 1)   + d * (b 0 * q 0 + b 1 * q 1 + b 2 * q 2) := by ring
    rw [this]
    simp [mul_comm] at h -- !
    rw [h.1]
    simp
    rw [‚Üê h.2]
    ring_nf
    tauto

lemma great {k : ‚Ñï} (c : ‚Ñù) (a p : Fin k ‚Üí ‚Ñù) :
    Matrix.dotProduct (c ‚Ä¢ a) p = c * Matrix.dotProduct a p := by
  unfold Matrix.dotProduct
  simp
  simp_rw [mul_assoc]
  exact Eq.symm (Finset.mul_sum Finset.univ (fun i ‚Ü¶ a i * p i) c)

-- example (a : ‚Ñù) (b : Fin 2 ‚Üí ‚Ñù) : smul' a b = a ‚Ä¢ b := by
--   unfold smul'
--   symm
--   rfl

open Matrix -- needed for ‚¨ù·µ•

lemma finfin {k l : ‚Ñï} (v‚ÇÄ : Fin k ‚Üí ‚Ñù) (v‚ÇÅ q : Fin l ‚Üí ‚Ñù)
    (H : Fin.append v‚ÇÄ v‚ÇÅ = Fin.append v‚ÇÄ q) :
    v‚ÇÅ = q := by
      ext i
      have : v‚ÇÅ i = Fin.append v‚ÇÄ v‚ÇÅ (Fin.natAdd k i) := by simp
      rw [this, H]
      simp

lemma nifnif {k l : ‚Ñï} (v‚ÇÄ : Fin k ‚Üí ‚Ñù) (v‚ÇÅ : Fin l ‚Üí ‚Ñù) (p : Fin k ‚Üí ‚Ñù)
  (q : Fin l ‚Üí ‚Ñù)
  (H : Fin.append v‚ÇÄ v‚ÇÅ = Fin.append p q) : v‚ÇÄ = p := by
      ext i
      have : v‚ÇÄ i = Fin.append v‚ÇÄ v‚ÇÅ (Fin.castAdd l i) := by simp
      rw [this, H]
      simp

/--
1-dimensional subspaces version of:
(A ‚äï B)^‚ä• = A^‚ä• ‚äï B^‚äï
(v is ‚ä• to anything in A ‚äï B) ‚Üî (v is in the span of some p ‚àà A‚ä• and some q ‚àà B‚ä•)
-/
theorem linear_logic_equation' {k l : ‚Ñï}
    (a : Fin k ‚Üí ‚Ñù) (b : Fin l ‚Üí ‚Ñù) (v‚ÇÄ : Fin k ‚Üí ‚Ñù) (v‚ÇÅ : Fin l ‚Üí ‚Ñù) :
    (‚àÄ c d : ‚Ñù, c ‚Ä¢ a ‚¨ù·µ• v‚ÇÄ
              + d ‚Ä¢ b ‚¨ù·µ• v‚ÇÅ = 0) ‚Üî
    ‚àÉ p q, p ‚¨ù·µ• a = 0
         ‚àß q ‚¨ù·µ• b = 0 ‚àß Fin.append v‚ÇÄ v‚ÇÅ = Fin.append p q := by
  constructor
  ¬∑ intro h
    use v‚ÇÄ, v‚ÇÅ
    simp_all [dotProduct, Finset.sum]
    constructor
    ¬∑ rw [‚Üê h 1 0]
      ring_nf
      simp
      simp_rw [mul_comm]
    ¬∑ rw [‚Üê h 0 1]
      ring_nf
      simp
      simp_rw [mul_comm]
  ¬∑ intro ‚ü®p,q,h‚ü© c d
    have H := h.2.2
    have : v‚ÇÄ = p := by
      apply nifnif; exact H
    subst this
    have : v‚ÇÅ = q := by
      apply finfin; exact H
    subst this
    rw [great,great]
    nth_rewrite 1 [dotProduct_comm]
    nth_rewrite 2 [dotProduct_comm]
    rw [h.1, h.2.1]
    simp

/--
(A ‚äï B)^‚ä• = A^‚ä• ‚äï B^‚äï
(v is ‚ä• to anything in A ‚äï B) ‚Üî (v is in the span of some p ‚àà A‚ä• and some q ‚àà B‚ä•)
because both just say that v = Fin.append v‚ÇÄ v‚ÇÅ
where v‚ÇÄ ‚àà A^‚ä• and v‚ÇÅ ‚àà B^‚ä•.
-/
theorem linear_logic_equation'' {k l : ‚Ñï}
    (A : Set (Fin k ‚Üí ‚Ñù)) (B : Set (Fin l ‚Üí ‚Ñù))
    [Nonempty A] [Nonempty B]
    (v‚ÇÄ : Fin k ‚Üí ‚Ñù) (v‚ÇÅ : Fin l ‚Üí ‚Ñù) :
    (‚àÄ c d : ‚Ñù, ‚àÄ a ‚àà A, ‚àÄ b ‚àà B, c ‚Ä¢ a ‚¨ù·µ• v‚ÇÄ -- this has vector addition
              + d ‚Ä¢ b ‚¨ù·µ• v‚ÇÅ = 0) ‚Üî
    ‚àÄ a ‚àà A, ‚àÄ b ‚àà B, ‚àÉ p q,
           p ‚¨ù·µ• a = 0 -- this does not (on its face)
         ‚àß q ‚¨ù·µ• b = 0 ‚àß Fin.append v‚ÇÄ v‚ÇÅ = Fin.append p q := by
    constructor
    ¬∑ intro h a ha b hb
      use v‚ÇÄ, v‚ÇÅ
      have h‚ÇÄ := h 0 1 a ha b hb
      have h‚ÇÅ := h 1 0 a ha b hb
      simp at h‚ÇÄ h‚ÇÅ
      constructor
      ¬∑ rw [‚Üê h‚ÇÅ]
        rw [dotProduct_comm]
      ¬∑ constructor
        ¬∑ rw [‚Üê h‚ÇÄ]
          rw [dotProduct_comm]
        ¬∑ rfl
    ¬∑ intro h c d a ha b hb
      specialize h a ha b hb
      obtain ‚ü®p,q,hpq‚ü© := h
      have : v‚ÇÄ = p := by
        apply nifnif
        exact hpq.2.2
      subst this
      have : v‚ÇÅ = q := by
        apply finfin
        exact hpq.2.2
      subst this
      simp [dotProduct_comm]
      rw [hpq.1, hpq.2.1]
      simp


/-- It begins... Feb 16, 2025


The focal lengths are those at which we "clear the level"
(at the next level they have to agree with `x`):

      `01101` 01110
          \  /
0100 0101 `0110` 0111   4
  \  /      \    /
   010     `011`
      \    /
  00   `01`            2
   \  /
   `0`     1           1
     \   /
      `‚àÖ`              0
-/
def x : Fin 5 ‚Üí Fin 2 := ![0,1,1,0,1]
def focalLength : Fin 5 ‚Üí Fin 6 := ![0,1,2,4,5]
-- should be a set, to automatize that it's "increasing" and injective.

def focalLen : Set (Fin 6) := {0,1,2,4,5}

/-- The domain is determined by the "current approximation " `z`
and the set of focal lengths.
-/
def lensDomain {s : ‚Ñï} (z : Fin s ‚Üí Fin 2) (focLen : Set (Fin s.succ)) (l : ‚Ñï) :
    Set (Fin l ‚Üí Fin 2) := {œÉ |
  ‚àÄ f ‚àà focLen, (h : f.1 < l) ‚Üí ‚àÄ j : Fin f, œÉ ‚ü®j.1, by omega‚ü©
                                           = z ‚ü®j.1, by omega‚ü©}

def rangeLengths : Fin 6 ‚Üí ‚Ñï := ![0,5,7,8,9,11]



-- /-- A particular example of a tree for `x` and `focalLen` -/
-- def T (k : Fin 6) (œÉ : lensDomain x focalLen k.1) :
-- -- Lerman does not use "lens domain" but it goes well with "focal point".
-- -- equivalently:
-- -- def T (k : Fin 6) (œÉ : { œÑ : Fin k.1 ‚Üí Fin 2 // œÑ ‚àà lensDomain x focalLen k.1}) :
--     Fin (rangeLengths k) ‚Üí Fin 2 := by
--   by_cases h‚ÇÄ : k = 0
--   ¬∑ subst h‚ÇÄ
--     intro i
--     unfold rangeLengths at i
--     have := i.2
--     simp at this -- in other words T(‚àÖ)=‚àÖ
--   ¬∑ by_cases h‚ÇÅ : k = 1
--     ¬∑ subst h‚ÇÅ
--       unfold rangeLengths
--       by_cases h‚ÇÇ : œÉ.1 ‚ü®0,by omega‚ü© = 0
--       ¬∑ exact ![0,0,0,0,0] -- in other words T(‚ü®0‚ü©)=‚ü®0,0,0,0,0‚ü©
--       ¬∑ exact ![1,0,1,1,1] -- in other words T(‚ü®1‚ü©)=‚ü®1,0,1,1,1‚ü©
--     by_cases h‚ÇÇ : k = 2
--     ¬∑ subst h‚ÇÇ
--       by_cases g‚ÇÄ : œÉ.1 ‚ü®0,by omega‚ü© = 0
--       by_cases h‚ÇÉ : œÉ.1 = ![0,0]
--       exact ![0,0,0,0,0,0,1]
--       by_cases h‚ÇÖ : œÉ.1 = ![0,1]
--       exact ![0,0,0,0,0,1,1]
--       by_cases h‚ÇÑ : œÉ.1 ‚ü®1,by omega‚ü© = 0
--       ¬∑ exfalso
--         contrapose h‚ÇÉ
--         simp
--         ext l
--         fin_cases l
--         . simp at g‚ÇÄ ‚ä¢
--           rw [g‚ÇÄ]
--           simp
--         ¬∑ rw [h‚ÇÑ]
--           simp
--       exfalso
--       apply h‚ÇÖ
--       ext u
--       fin_cases u
--       ¬∑ simp at g‚ÇÄ ‚ä¢

--         rw [g‚ÇÄ]
--         simp
--       simp at h‚ÇÑ ‚ä¢
--       have : (œÉ.1 ‚ü®1,by omega‚ü©).1 = 0 ‚à® (œÉ.1 ‚ü®1,by omega‚ü©).1 = 1 := by omega
--       cases this with
--       | inl h => simp at h;exfalso;apply h‚ÇÑ;exact Eq.symm (Fin.eq_of_val_eq (id (Eq.symm h)))
--       | inr h => simp at h;exact h
--       have : œÉ.1 ‚ü®1,by omega‚ü© = 1 := sorry

--       by_cases h‚ÇÉ : œÉ.1 = ![1,0]
--       ¬∑ rw [h‚ÇÉ] at *
--         have h := œÉ.2
--         unfold lensDomain at h
--         -- simp at h
--         specialize h 1 (by simp [focalLen]) (by simp) ‚ü®0,by simp‚ü©
--         unfold x at h
--         simp at h g‚ÇÄ
--         tauto
--         -- we could define exact ![1,0,1,1,1,0,1] but we want undefined
--       ¬∑
--         have : œÉ.1 = ![1,1] := by
--           ext l
--           fin_cases l
--           simp_all
--           sorry
--           sorry
--         rw [this] at *
--         have h := œÉ.2
--         unfold lensDomain focalLen x at h
--         simp at h g‚ÇÄ
--         tauto
--     have h := œÉ.2
--     unfold lensDomain at h
--     simp at h
--     sorry -- too many cases


/-- need the kind of extension where
we can switch from `z` to `x` and, because there are fewer focal points
(the ones where `z` and `x` differ being removed),
`z` remains in the domain.
-/
def switchto {s : ‚Ñï} (z x : Fin s ‚Üí Fin 2)  (focLen : Set (Fin s.succ)) :=
  lensDomain x {i : (Fin s.succ) | i ‚àà focLen
    ‚àß ‚àÄ j, (h : j < i) ‚Üí x ‚ü®j.1,by omega‚ü©
             = z ‚ü®j.1,by omega‚ü©
  }


theorem xlensDomain {s : ‚Ñï} (_ x : Fin s ‚Üí Fin 2)  (focLen : Set (Fin s.succ)):
    x ‚àà lensDomain x focLen _ := by
  unfold lensDomain
  intro f _ h j
  rfl


theorem zinswitchto {s : ‚Ñï} (z x : Fin s ‚Üí Fin 2)  (focLen : Set (Fin s.succ)):
    z ‚àà switchto z x focLen _ := fun f g h j => by
  have := g.2 ‚ü®j.1, by omega‚ü© j.2
  symm
  exact this

theorem subset_switchto {s l : ‚Ñï} (z x : Fin s ‚Üí Fin 2)  (focLen : Set (Fin s.succ)):
    lensDomain x focLen l ‚äÜ switchto z x focLen l := by
  intro œÉ hœÉ
  simp [switchto, lensDomain] at hœÉ ‚ä¢
  intro f hf hxz h j
  specialize hxz ‚ü®j.1, by omega‚ü© j.2
  specialize hœÉ f hf h j
  simp_all only

theorem xinswitchto {s : ‚Ñï} (z x : Fin s ‚Üí Fin 2)  (focLen : Set (Fin s.succ)):
    x ‚àà switchto z x focLen _ := by
  apply subset_switchto
  intro f _ h j
  rfl


theorem lensDomain‚ÇÅ : lensDomain x focalLen _ ![] := by
  intro f _ h
  simp at h

theorem lensDomain‚ÇÄ {b : Fin 2} : lensDomain x focalLen _ ![b] := by
  intro i _ h
  unfold x
  simp at h
  intro j
  have := j.2
  omega
theorem lensDomain‚ÇÅ‚ÇÇ {b : Fin 2} : lensDomain x focalLen _ ![0,b] := by
  intro f g h
  simp at h
  unfold focalLen at g
  have : f.1 = 0 ‚à® f.1 = 1 := by omega
  cases this with
  | inl h =>
    intro j
    have := j.2
    omega
  | inr h =>
    intro j
    have := j.2
    have : j.1 = 0 := by omega
    simp_rw [this]
    unfold x
    rfl
theorem lensDomain‚ÇÉ {b : Fin 2} : ¬¨ lensDomain x focalLen _ ![1,b] := by
  intro hc
  unfold lensDomain x at hc
  specialize hc 1 (by unfold focalLen;simp) (by aesop) ‚ü®0,by aesop‚ü©
  simp at hc

theorem lensDomain‚ÇÑ {b : Fin 2} : ¬¨ lensDomain x focalLen _ ![0,0,b] := by
  intro hc
  unfold lensDomain x at hc
  specialize hc 2 (by unfold focalLen;simp) (by aesop) ‚ü®1,by aesop‚ü©
  simp at hc



-- /-- œÉ extends x up to the last focalLength below |œÉ| -/
-- def lensDomainain {l : Fin 6} (œÉ : Fin l.1 ‚Üí Fin 2) : Prop :=
--   ‚àÄ i : Fin 5, (g : (focalLength i).1 < l.1) ‚Üí
--     ‚àÄ j : Fin (focalLength i).1, œÉ ‚ü®j.1, by omega‚ü© -- (Fin.castLT j (by omega)) --‚ü®j.1, by omega‚ü©
--       = x ‚ü®j.1, by omega‚ü© -- (Fin.castLT j (by omega))

-- theorem ind : lensDomainain (l := 0) ![] := by
--   unfold lensDomainain
--   intro i g
--   simp at g

-- theorem xlensDomainain : lensDomainain (l := 5) x := fun _ _ _ => rfl
-- theorem anotherlensDomainain' : ¬¨ lensDomainain (l := 2) ![1,0] := fun hc => by
--   unfold lensDomainain at hc
--   specialize hc 1
--     (by unfold focalLength;simp)
--     (by unfold focalLength;simp;exact 0)
--   simp at hc
--   unfold x at hc
--   simp at hc

-- theorem anotherlensDomainain'' : lensDomainain (l := 1) ![1] := by
--   intro i g j
--   simp at g
--   have := j.2
--   omega

-- theorem anotherlensDomainain : lensDomainain (l := 2) ![0,1] := by
--   intro i g j
--   unfold x
--   unfold focalLength at *
--   fin_cases i
--   ¬∑ have := j.2
--     simp at this
--   ¬∑ have := j.2
--     conv at this =>
--       right
--       change 1
--     have : ![(0 : Fin 2), 1, 1, 0, 1] = Fin.append ![0,1] ![1,0,1] := by
--       ext k
--       fin_cases k <;> aesop
--     have : ![(0 : Fin 2), 1, 1, 0, 1] ‚ü®‚Üëj, by omega‚ü© =
--            ![0, 1] ‚ü®‚Üëj, by omega‚ü© := by
--       rw [this]
--       simp [Fin.append, Fin.addCases]
--       rfl
--     rw [this]
--   ¬∑ conv at g =>
--       lhs
--       change 2
--     simp at g
--   ¬∑ conv at g =>
--       lhs
--       change 4
--     simp at g
--   ¬∑ conv at g =>
--       lhs
--       change 5
--     simp at g
