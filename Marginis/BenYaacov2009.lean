import Mathlib.MeasureTheory.MeasurableSpace.Defs
import Mathlib.MeasureTheory.Measure.Haar.OfBasis
import Mathlib.MeasureTheory.Function.LpSpace

/-!

## Modular functionals and perturbations of Nakano spaces
by ITAI BEN-YAACOV

defines L‚ÇÄ(X,ùìë,Œº) to be the space of measurable functions
f:X‚Üí‚Ñù up to a.e. equality.

Here we define that and give an example.
-/

def L‚ÇÄ {X : Type*} { _ : MeasureTheory.MeasureSpace X} :=
  @MeasureTheory.Lp X ‚Ñù
  MeasureTheory.MeasureSpace.toMeasurableSpace _ 0 MeasureTheory.volume

/-- The constant 0 function on `‚Ñù` is in L‚ÇÄ. -/
example : @L‚ÇÄ ‚Ñù Real.measureSpace := ‚ü®
  @MeasureTheory.AEEqFun.mk ‚Ñù _
    MeasureTheory.volume ‚Ñù _ (fun _ => 0)
    (MeasureTheory.aestronglyMeasurable_const),
    (QuotientAddGroup.eq_zero_iff
          (MeasureTheory.AEEqFun.mk (fun _ ‚Ü¶ 0) MeasureTheory.aestronglyMeasurable_const)).mp
      rfl‚ü©

/-- The constant 0 function on any `X` is in L‚ÇÄ. -/
example {X : Type*} { m : MeasureTheory.MeasureSpace X} : @L‚ÇÄ X m := ‚ü®
  @MeasureTheory.AEEqFun.mk X _
    MeasureTheory.volume ‚Ñù _ (fun _ => 0)
    (MeasureTheory.aestronglyMeasurable_const),
    (QuotientAddGroup.eq_zero_iff
          (MeasureTheory.AEEqFun.mk (fun _ ‚Ü¶ 0) MeasureTheory.aestronglyMeasurable_const)).mp
      rfl‚ü©
